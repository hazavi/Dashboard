@page "/news"
@inject Dashboard.Services.NewsService NewsService

@if (newsItems == null)
{
    <p>Loading...</p>
}
else if (newsItems.Length == 0)
{
    <p>No news items available.</p>
}
else
{
    <div class="news-container">
        @foreach (var item in newsItems)
        {
            <div class="news-item">
                <h4>@item.Title</h4>
                @if (!string.IsNullOrEmpty(item.ImageUrlToShow))
                {
                    <img src="@item.ImageUrlToShow" alt="News Image" class="news-image" />
                }
                else
                {
                    <p>No image available.</p>
                }
                <p>@item.Description</p>
                <a href="@item.Link" target="_blank">Read more</a>
            </div>
        }
    </div>
}

@code {
    private NewsItem[] newsItems = Array.Empty<NewsItem>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await NewsService.GetTopNewsAsync();
            if (response?.Results != null && response.Results.Length > 0)
            {
                newsItems = response.Results;

                // Log each image URL to verify
                foreach (var item in newsItems)
                {
                    Console.WriteLine($"Image URL: {item.ImageUrl}");
                }
            }
            else
            {
                newsItems = Array.Empty<NewsItem>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching news: {ex.Message}");
            newsItems = Array.Empty<NewsItem>();
        }
    }


}
