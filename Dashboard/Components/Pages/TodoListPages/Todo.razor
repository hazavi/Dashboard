@page "/todo"
@using Microsoft.EntityFrameworkCore
@using Dashboard.Model
@using Dashboard.Connect
@inject Dashboard.Connect.DashboardDbContext DB
@inject Dashboard.Services.LoginService loginService

@if (loginService.IsLoggedIn)
{
    <h2><strong>Your Todo Lists</strong></h2>

    <p>
        <a href="todolists/create" class="addbutton btn btn-outline-light">
            <Icon Name="IconName.PlusLg" Size="IconSize.x5" Style="color: #0085FF;" />
            Add
        </a>
    </p>

    @if (todos is null)
    {
        <p><em>Loading...</em></p>
    }
    else if (todos.Count == 0)
    {
        <p>No todo lists found.</p>
    }
    else
    {
        <div class="sticky-notes-container">
            @foreach (var todo in todos)
            {
                <div class="sticky-note @GetNoteCssClass(todo)" style="background-color: @(todo.isDone ? "#ccc" : todo.Color); --sticky-note-border-color: @(todo.isDone ? "#999" : todo.Color);">
                    <div class="isDone">
                        <span class="progress-circle-dot @GetCircleDotColor(todo.isDone)"></span>
                        <span>@(todo.isDone ? "Done" : "Not Done")</span>
                    </div>
                    <div class="title">
                        @todo.Title
                    </div>
                    <div class="text">
                        @((MarkupString)todo.Description)
                    </div>

                    <div class="actionButtons">
                        <label class="switch">
                            <input type="checkbox" @bind="todo.isDone" />
                            <span class="slider round"></span>
                        </label>
                        @if (!todo.isDone)
                        {
                            <button class="nav-link btn btn-primary" @onclick="() => ToggleColorSelector(todo.Id)">
                                <span class="oi oi-brush @GetColorSelectorIcon(todo.Id)" aria-hidden="true"></span>
                            </button>
                        }
                        <a href="@($"/todolists/details?id=" + todo.Id)" class="viewbtn btn btn-primary">
                            <Icon Name="IconName.EyeFill" Size="IconSize.x5" />
                        </a>
                        <a href="@($"/todolists/edit?id=" + todo.Id)" class="editbtn btn btn-warning">
                            <Icon Name="IconName.PencilFill" Size="IconSize.x5" />
                        </a>
                        <a href="@($"/todolists/delete?id=" + todo.Id)" class="deletebtn btn btn-danger">
                            <Icon Name="IconName.TrashFill" Size="IconSize.x5" />
                        </a>
                    </div>

                    @if (colorSelectors.ContainsKey(todo.Id) && colorSelectors[todo.Id])
                    {
                        <div class="color-options">
                            @foreach (var color in customColors)
                            {
                                <button class="color-button" style="background-color: @color" @onclick="() => ChangeNoteColor(todo, color)">
                                    @if (todo.Color == color)
                                    {
                                        <span class="oi oi-check" aria-hidden="true"></span>
                                    }
                                </button>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    }
}
else
{
    <p>You have to <a href="/login">log in</a>.</p>
}

@code {
    private List<TodoList>? todos;

    private List<string> customColors = new List<string>
    {
        "#ffd700", "#FF6B6B", "lightblue", "lightskyblue", "darkseagreen", "lightgreen", "lightsteelblue",
        "mediumpurple", "antiquewhite", "burlywood", "cornflowerblue", "gold", "lightseagreen", "lightsalmon",
        "#ff6a00", "#00ffff", "#ff00dc", "lightpink", "#b200ff"
    };

    private Dictionary<int, bool> colorSelectors = new Dictionary<int, bool>();

    protected override async Task OnInitializedAsync()
    {
        if (loginService.IsLoggedIn)
        {
            var userId = loginService.Id;

            todos = await DB.TodoLists
                .Where(t => t.UserId == userId)
                .ToListAsync();
        }
    }

    private string GetCircleDotColor(bool isDone)
    {
        return isDone ? "red" : "green";
    }

    private string GetNoteCssClass(TodoList item)
    {
        return item.isDone ? "done" : "";
    }

    private void ToggleColorSelector(int itemId)
    {
        if (colorSelectors.ContainsKey(itemId))
        {
            colorSelectors[itemId] = !colorSelectors[itemId];
        }
        else
        {
            colorSelectors[itemId] = true;
        }
    }

    private string GetColorSelectorIcon(int itemId)
    {
        return colorSelectors.ContainsKey(itemId) && colorSelectors[itemId] ? "oi-caret-top" : "oi-paint-bucket";
    }

    private void ChangeNoteColor(TodoList item, string color)
    {
        item.Color = color;
        DB.TodoLists.Update(item);
        DB.SaveChanges();
        if (colorSelectors.ContainsKey(item.Id))
        {
            colorSelectors[item.Id] = false;
        }
    }
}
