@page "/todo"
@using Microsoft.EntityFrameworkCore
@using Dashboard.Model
@using Dashboard.Connect
@inject Dashboard.Connect.DashboardDbContext DB
@inject Dashboard.Services.LoginService loginService

<!-- Check if the user is logged in -->
@if (loginService.IsLoggedIn)
{
    <h2><strong>Your Todo Lists</strong></h2>

    <p>
        <a href="todolists/create" class="addbutton btn btn-outline-light">
            <Icon Name="IconName.PlusLg" Size="IconSize.x5" Style="color: #0085FF;" />
            Add
        </a>
    </p>

    @if (todos is null)
    {
        <p><em>Loading...</em></p>
    }
    else if (todos.Count == 0)
    {
        <p>No todo lists found.</p>
    }
    @* Display todo list items *@
    else
    {
        <div class="sticky-notes-container">
            @foreach (var todo in todos)
            {
                <div class="sticky-note @GetNoteCssClass(todo)" style="background-color: @(todo.isDone ? "#ccc" : todo.Color); --sticky-note-border-color: @(todo.isDone ? "#999" : todo.Color);">
                    <div class="isDone">
                        <span class="progress-circle-dot @GetCircleDotColor(todo.isDone)"></span>
                        <span>@(todo.isDone ? "Done" : "Not Done")</span>
                    </div>
                    <div class="title">
                        @todo.Title
                    </div>
                    <div class="text">
                        @((MarkupString)todo.Description)
                    </div>

                    <div class="actionButtons">
                        <label class="switch">
                            <input type="checkbox" @bind="todo.isDone" />
                            <span class="slider round"></span>
                        </label>
                        <button class="pinbtn btn btn-info" @onclick="() => TogglePin(todo)">
                            <Icon Name="@(todo.IsPinned ? IconName.PinFill : IconName.Pin)" Size="IconSize.x5" />
                        </button>

                        <a href="@($"/todolists/details?id=" + todo.Id)" class="viewbtn btn btn-primary">
                            <Icon Name="IconName.EyeFill" Size="IconSize.x5" />
                        </a>
                        <a href="@($"/todolists/edit?id=" + todo.Id)" class="editbtn btn btn-warning">
                            <Icon Name="IconName.PencilFill" Size="IconSize.x5" />
                        </a>
                        <a href="@($"/todolists/delete?id=" + todo.Id)" class="deletebtn btn btn-danger">
                            <Icon Name="IconName.TrashFill" Size="IconSize.x5" />
                        </a>
                    </div>
                </div>
            }
        </div>
    }
}
else
{
    <p>You have to <a href="/login">log in</a>.</p>
}

@code {
    private List<TodoList>? todos; // List of todo items

    protected override async Task OnInitializedAsync()
    {
        // Check if the user is logged in
        if (loginService.IsLoggedIn)
        {
            var userId = loginService.Id;

            // Fetch the todo lists for the logged-in user
            todos = await DB.TodoLists
                .Where(t => t.UserId == userId)
                .ToListAsync();
        }
    }

    private string GetCircleDotColor(bool isDone)
    {
        // Return color based on whether the todo is done or not
        return isDone ? "red" : "green";
    }

    private string GetNoteCssClass(TodoList item)
    {
        // Return CSS class based on whether the todo is done
        return item.isDone ? "done" : "";
    }

    private void TogglePin(TodoList todo)
    {
        // Unpin any currently pinned todo items
        var pinnedTodo = DB.TodoLists
            .Where(t => t.UserId == loginService.Id && t.IsPinned)
            .FirstOrDefault();

        if (pinnedTodo != null && pinnedTodo.Id != todo.Id)
        {
            pinnedTodo.IsPinned = false;
            DB.TodoLists.Update(pinnedTodo);
        }

        // Toggle pin state of the current todo
        todo.IsPinned = !todo.IsPinned;
        DB.TodoLists.Update(todo);

        // Save changes to the database
        DB.SaveChanges();

        // Refresh the todo list
        todos = DB.TodoLists
            .Where(t => t.UserId == loginService.Id)
            .ToList();
    }
}
