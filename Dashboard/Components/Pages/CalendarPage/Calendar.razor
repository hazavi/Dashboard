@page "/calendar"
@inject Dashboard.Services.CalendarService CalendarService

<div class="calendar-controls">
    <button @onclick="ShowPreviousMonth">
        <Icon Name="IconName.ArrowLeft" Size="IconSize.x6" Style=" color: #000;" />
    </button>
    <button @onclick="ShowCurrentMonth">Current Month</button>
    <button @onclick="ShowNextMonth">
        <Icon Name="IconName.ArrowRight" Size="IconSize.x6" Style=" color: #000;" />
    </button>
</div>

@if (holidays == null)
{
    <p><em>Loading holidays...</em></p> 
}
else
{
    <div class="calendar-container">
        <div class="calendar-month">
            <h3>@currentMonth.ToString("MMMM yyyy")</h3>

            <div class="calendar-grid">
                @* Display day headers *@
                <div class="calendar-day-header">Sun</div>
                <div class="calendar-day-header">Mon</div>
                <div class="calendar-day-header">Tue</div>
                <div class="calendar-day-header">Wed</div>
                <div class="calendar-day-header">Thu</div>
                <div class="calendar-day-header">Fri</div>
                <div class="calendar-day-header">Sat</div>

                @* Add empty cells for days before the first day of the month *@
                @{
                    var firstDayOfMonth = new DateTime(currentMonth.Year, currentMonth.Month, 1);
                    var paddingDays = (int)firstDayOfMonth.DayOfWeek;
                }
                @for (int i = 0; i < paddingDays; i++)
                {
                    <div class="calendar-day empty"></div> <!-- Empty cells to align the start of the month -->
                }

                @* Display days of the current month and highlight holidays *@
                @for (int day = 1; day <= DateTime.DaysInMonth(currentMonth.Year, currentMonth.Month); day++)
                {
                    var currentDate = new DateTime(currentMonth.Year, currentMonth.Month, day);
                    var holiday = holidays.FirstOrDefault(h => h.Date.Iso == currentDate.ToString("yyyy-MM-dd"));

                    <div class="calendar-day @GetDayCssClass(currentDate)">
                        <span>@day</span> <!-- Display the day number -->
                        @if (holiday != null)
                        {
                            <!-- If there's a holiday on this day, display its name and description -->
                            <div class="holiday-info">
                                <strong>@holiday.Name</strong>
                                <p>@holiday.Description</p>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    // Store the currently viewed month
    private DateTime currentMonth;

    // List to hold the holidays for the current month
    private List<Holiday>? holidays;

    // On component initialization, set the current month to the current date and load the holidays
    protected override async Task OnInitializedAsync()
    {
        currentMonth = DateTime.Now;
        await LoadHolidaysAsync();
    }

    // Load holidays for the current month asynchronously
    private async Task LoadHolidaysAsync()
    {
        holidays = await CalendarService.GetHolidaysAsync();
        Console.WriteLine($"Loaded holidays: {holidays.Count}");

        // Debugging: Output holiday details to the console
        foreach (var holiday in holidays)
        {
            Console.WriteLine($"Holiday: {holiday.Name} on {holiday.Date.Iso}");
        }
    }

    // Show the previous month and reload holidays
    private async Task ShowPreviousMonth()
    {
        currentMonth = currentMonth.AddMonths(-1); // Go to the previous month
        await LoadHolidaysAsync(); // Load holidays for the new month
    }

    // Show the current month and reload holidays
    private async Task ShowCurrentMonth()
    {
        currentMonth = DateTime.Now; // Set current month to today's date
        await LoadHolidaysAsync(); // Reload holidays for the current month
    }

    // Show the next month and reload holidays
    private async Task ShowNextMonth()
    {
        currentMonth = currentMonth.AddMonths(1); // Go to the next month
        await LoadHolidaysAsync(); // Load holidays for the new month
    }

    // Return a CSS class to highlight the current day
    private string GetDayCssClass(DateTime date)
    {
        return date.Date == DateTime.Now.Date ? "today" : ""; // Add "today" class if the date matches today's date
    }
}
