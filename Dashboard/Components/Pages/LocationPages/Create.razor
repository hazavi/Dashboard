@page "/locations/create/{userId:int}"
@using Microsoft.EntityFrameworkCore
@using Dashboard.Model
@inject DashboardDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Create Location</PageTitle>

<h1>Create Location</h1>

<hr />
<div class="form-container">
    <EditForm Model="Location" OnValidSubmit="AddLocation" class="form">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <div class="form-group">
            <label for="userid" class="form-label">UserId:</label>
            <InputNumber id="userid" @bind-Value="Location.UserId" class="form-control" readonly="readonly" />
            <ValidationMessage For="() => Location.UserId" class="text-danger" />
        </div>

        <div class="form-group">
            <label for="zipcode" class="form-label">ZipCode:</label>
            <InputNumber id="zipcode" @bind-Value="Location.ZipCode" class="form-control" />
            <ValidationMessage For="() => Location.ZipCode" class="text-danger" />
        </div>

        <div class="form-group">
            <label for="cityname" class="form-label">CityName:</label>
            <InputText id="cityname" @bind-Value="Location.CityName" class="form-control" />
            <ValidationMessage For="() => Location.CityName" class="text-danger" />
        </div>

        <div class="form-group">
            <label for="country" class="form-label">Country:</label>
            <InputText id="country" @bind-Value="Location.Country" class="form-control" />
            <ValidationMessage For="() => Location.Country" class="text-danger" />
        </div>

        <button type="submit" class="btn btn-primary form-button">Create</button>
    </EditForm>
</div>

<div class="back-link">
    <a href="/profile">
        <Icon Name="IconName.ArrowLeft" Size="IconSize.x5" />

    </a>
</div>

@code {
    [Parameter]
    public int userId { get; set; }

    public Location Location { get; set; } = new();

    protected override void OnInitialized()
    {
        // Pre-fill the UserId from the URL parameter
        Location.UserId = userId;
    }

    public async Task AddLocation()
    {
        // Check if the user already has a location
        var existingLocation = await DbContext.Locations.FirstOrDefaultAsync(l => l.UserId == Location.UserId);
        if (existingLocation != null)
        {
            // Handle this case by redirecting to profile page
            NavigationManager.NavigateTo("/profile");
            return;
        }

        // Add the location to the context and save it
        DbContext.Locations.Add(Location);
        await DbContext.SaveChangesAsync();

        // Navigate to the profile page after successful creation
        NavigationManager.NavigateTo("/profile");
    }
}
