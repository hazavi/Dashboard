@page "/locations/create/{userId:int}"
@using Microsoft.EntityFrameworkCore
@using Dashboard.Model
@inject DashboardDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Create Location</PageTitle>

<h1>Create Location</h1>

<h4>Location</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Location" OnValidSubmit="AddLocation">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label for="userid" class="form-label">UserId:</label>
                <InputNumber id="userid" @bind-Value="Location.UserId" class="form-control" readonly="readonly" />
                <ValidationMessage For="() => Location.UserId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="zipcode" class="form-label">ZipCode:</label>
                <InputNumber id="zipcode" @bind-Value="Location.ZipCode" class="form-control" />
                <ValidationMessage For="() => Location.ZipCode" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="cityname" class="form-label">CityName:</label>
                <InputText id="cityname" @bind-Value="Location.CityName" class="form-control" />
                <ValidationMessage For="() => Location.CityName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="country" class="form-label">Country:</label>
                <InputText id="country" @bind-Value="Location.Country" class="form-control" />
                <ValidationMessage For="() => Location.Country" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/profile" class="btn btn-secondary">Back to Profile</a>
</div>

@code {
    [Parameter]
    public int userId { get; set; }

    public Location Location { get; set; } = new();

    protected override void OnInitialized()
    {
        // Pre-fill the UserId from the URL parameter
        Location.UserId = userId;
    }

    public async Task AddLocation()
    {
        // Check if the user already has a location
        var existingLocation = await DbContext.Locations.FirstOrDefaultAsync(l => l.UserId == Location.UserId);
        if (existingLocation != null)
        {
            // Optionally, handle this case (e.g., show an error message or redirect)
            NavigationManager.NavigateTo("/profile");
            return;
        }

        // Add the location to the context and save it
        DbContext.Locations.Add(Location);
        await DbContext.SaveChangesAsync();

        // Navigate to the profile page after successful creation
        NavigationManager.NavigateTo("/profile");
    }
}
